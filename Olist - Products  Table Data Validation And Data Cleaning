-- Use the 'olist' database for the cleaning process

USE olist;

-- Select all records from the products table to understand the current data

SELECT * FROM products;

-- Starting the cleaning of the products table
-- Creating a temporary table to hold the original data for processing

CREATE TABLE temp_prod LIKE products;

-- Inserting all records from the products table into the temporary table

INSERT INTO temp_prod
SELECT * FROM products;

-- UNDERSTANDING THE SCHEMA
-- Describe the structure of the temporary products table

DESCRIBE temp_prod;

-- Changing the data types to ensure they are appropriate for the data
-- Selecting all records along with a row number for reference

SELECT *, ROW_NUMBER() OVER() FROM temp_prod;

-- Modifying the data types of various columns to ensure they are correctly defined

ALTER TABLE temp_prod 
MODIFY COLUMN product_category TEXT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_name_length INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_desc_length INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_photos_qty INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_weight_grams INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_length_cm INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_height_cm INT;

ALTER TABLE temp_prod 
MODIFY COLUMN product_width_cm INT;

-- Handling missing values
-- Count the total records and identify missing values for key fields

SELECT 
    COUNT(*) AS cnt,
    SUM(IF(product_id='', 1, 0)) AS product_id_null,
    SUM(IF(product_category='', 1, 0)) AS product_category_null,
    SUM(IF(product_name_length='', 1, 0)) AS product_name_length_null,
    SUM(IF(product_desc_length='', 1, 0)) AS product_desc_length_null,
    SUM(IF(product_photos_qty='', 1, 0)) AS product_photos_qty_null,
    SUM(IF(product_weight_grams='', 1, 0)) AS product_weight_grams_null,
    SUM(IF(product_length_cm='', 1, 0)) AS product_length_cm_null,
    SUM(IF(product_height_cm='', 1, 0)) AS product_height_cm_null,
    SUM(IF(product_width_cm='', 1, 0)) AS product_width_cm_null
FROM temp_prod;

-- Update the temporary table to set NULL values where necessary

UPDATE temp_prod
SET product_category = NULL
WHERE product_category = '';

UPDATE temp_prod
SET product_name_length = NULL
WHERE product_name_length = '';

UPDATE temp_prod
SET product_desc_length = NULL
WHERE product_desc_length = '';

UPDATE temp_prod
SET product_photos_qty = NULL
WHERE product_photos_qty = '';

UPDATE temp_prod
SET product_weight_grams = NULL
WHERE product_weight_grams = '';

UPDATE temp_prod
SET product_length_cm = NULL
WHERE product_length_cm = '';

UPDATE temp_prod
SET product_height_cm = NULL
WHERE product_height_cm = '';

UPDATE temp_prod
SET product_width_cm = NULL
WHERE product_width_cm = '';

-- Select records where product_width_cm is empty or contains spaces

SELECT * FROM temp_prod
WHERE product_width_cm = ' ';

-- Using a Common Table Expression (CTE) to identify rows for deletion

WITH t AS (
    SELECT *, ROW_NUMBER() OVER() rk FROM temp_prod
)
DELETE FROM temp_prod 
WHERE product_width_cm IN (
    SELECT product_width_cm
    FROM t 
    WHERE rk = 1276
);

-- Select all records from the temporary products table to verify changes

SELECT * FROM temp_prod;

-- Commit the transaction to ensure all changes are saved

COMMIT;

-- DEALING WITH DUPLICATES
-- Identify potential duplicates based on key fields in the temp_prod table

SELECT 
    product_id, product_category, product_name_length, product_desc_length,
    product_photos_qty, product_weight_grams, product_length_cm, product_height_cm, product_width_cm,
    COUNT(*) AS cnt 
FROM 
    temp_prod 
GROUP BY 
    product_id, product_category, product_name_length, product_desc_length,
    product_photos_qty, product_weight_grams, product_length_cm, product_height_cm, product_width_cm
HAVING 
    COUNT(*) > 1;

-- Using a CTE to identify duplicates

WITH t AS (
    SELECT 
        product_id, product_category, product_name_length, product_desc_length,
        product_photos_qty, product_weight_grams, product_length_cm, product_height_cm, product_width_cm,
        ROW_NUMBER() OVER (PARTITION BY product_id, product_category, product_name_length, product_desc_length,
            product_photos_qty, product_weight_grams, product_length_cm, product_height_cm, product_width_cm) AS rk
    FROM temp_prod 
)
SELECT * FROM t 
WHERE rk != 1;

-- No duplicates found in the temp_prod table

-- Standardizing the data
-- Select all records from the temporary products table

SELECT * FROM temp_prod;

-- Standardizing the product_category by capitalizing the first letter

UPDATE temp_prod
SET product_category = CONCAT(UPPER(LEFT(product_category, 1)), SUBSTR(product_category, 2));

-- HANDLING THE MISSING VALUES
-- Identifying outliers for product_name_length

SELECT product_name_length, 
    ((product_name_length - (SELECT AVG(product_name_length) FROM temp_prod)) / 
    (SELECT STDDEV(product_name_length) FROM temp_prod)) AS z
FROM temp_prod
HAVING (z) > 3; -- Fill with AVG because it doesn't have outliers

-- Update product_name_length with the average value where it is NULL

UPDATE temp_prod 
SET product_name_length = (
    SELECT AVG(product_name_length) 
    FROM (
        SELECT product_name_length
        FROM temp_prod
    ) AS subquery
)
WHERE product_name_length IS NULL;

-- DONE

-- Identifying outliers for product_desc_length

SELECT product_desc_length, 
    ((product_desc_length - (SELECT AVG(product_desc_length) FROM temp_prod)) / 
    (SELECT STDDEV(product_desc_length) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with AVG because it has minimum outliers

-- Update product_desc_length with the average value where it is empty

UPDATE temp_prod 
SET product_desc_length = (SELECT AVG(product_desc_length) FROM temp_prod)
WHERE product_desc_length = '';

-- DONE

-- Identifying outliers for product_photos_qty

SELECT product_photos_qty, 
    ((product_photos_qty - (SELECT AVG(product_photos_qty) FROM temp_prod)) / 
    (SELECT STDDEV(product_photos_qty) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with median because it has outliers

-- Identifying outliers for product_weight_grams

SELECT product_weight_grams, 
    ((product_weight_grams - (SELECT AVG(product_weight_grams) FROM temp_prod)) / 
    (SELECT STDDEV(product_weight_grams) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with AVG because the outliers are very close to AVG

-- Identifying outliers for product_length_cm

SELECT product_length_cm, 
    ((product_length_cm - (SELECT AVG(product_length_cm) FROM temp_prod)) / 
    (SELECT STDDEV(product_length_cm) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with median as it has outliers

-- Identifying outliers for product_height_cm

SELECT product_height_cm, 
    ((product_height_cm - (SELECT AVG(product_height_cm) FROM temp_prod)) / 
    (SELECT STDDEV(product_height_cm) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with median as it has outliers

-- Identifying outliers for product_width_cm

SELECT product_width_cm, 
    ((product_width_cm - (SELECT AVG(product_width_cm) FROM temp_prod)) / 
    (SELECT STDDEV(product_width_cm) FROM temp_prod)) AS z
FROM temp_prod
HAVING z > 3; -- Fill with median as it has outliers

-- Commit the transaction to ensure all changes are saved

COMMIT;

-- Select all records from the cleaned temporary products table

SELECT * FROM temp_prod;

-- Truncate the original products table to prepare for new data

TRUNCATE products;

-- Insert the cleaned data from the temporary table into the original products table

INSERT INTO products 
SELECT * FROM temp_prod;

-- Select all records from the products table to verify the cleaning process

SELECT * FROM products;
